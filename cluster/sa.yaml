# ~$ gcloud iam service-accounts add-iam-policy-binding \
#   --role roles/iam.workloadIdentityUser \
#   --member "serviceAccount:mashanz-software-engineering.svc.id.goog[onxp-exercise-sa]" \
#   cloudsql-onxp@mashanz-software-engineering.iam.gserviceaccount.com
# ```
# 4. Annotate the KSA to tie it with GSA
# ```
# ~$ kubectl annotate serviceaccount \
#   --namespace exercise \
#   onxp-exercise-sa \
#   iam.gke.io/gcp-service-account=cloudsql-onxp@mashanz-software-engineering.iam.gserviceaccount.com

# kubectl -n exercise apply -f sa.yaml
# Check cluster role: 
# - kubectl get clusterrolebindings --all-namespaces -o wide | grep onxp-exercise-sa

# kubectl -n exercise apply -f sa.yaml

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: onxp-exercise-sa
  namespace: exercise

# [optional] execute after service acount and secret are created to mount secret on sa
secrets:
  - name: onxp-exercise-sa-secret

---
apiVersion: v1
kind: Secret
type: "kubernetes.io/service-account-token"
metadata:
  name: onxp-exercise-sa-secret
  annotations:
    kubernetes.io/service-account.name: onxp-exercise-sa

---
# kubectl describe clusterrole onxp-role
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: onxp-role
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: onxp-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: onxp-role
subjects:
  - kind: ServiceAccount
    name: onxp-exercise-sa
    namespace: exercise

---